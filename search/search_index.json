{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Seatsurfing Documentation Seatsurfing is a cloud native solution for free seating and co-working in your organisation. This documentation guides you through installing Seatsurfing on your servers, placing seats and spaces as an organisation's administrator and using the mobile app on your smartphone.","title":"Home"},{"location":"#seatsurfing-documentation","text":"Seatsurfing is a cloud native solution for free seating and co-working in your organisation. This documentation guides you through installing Seatsurfing on your servers, placing seats and spaces as an organisation's administrator and using the mobile app on your smartphone.","title":"Seatsurfing Documentation"},{"location":"admin-ui/","text":"Administration UI You can access the adminisatration web interface using a modern web browser by visiting your Seatsurfing's instance backend: http://localhost:8080/admin/ To log in to the administrator interface, your user must be equipped with org admin permissions. After logging in, you'll see a web interface like this: At the left, you can navigate to the various areas of the administrator interface. At the head, you can quickly search for objects (such as users, locations, spaces). Right beside the search bar, you can log out. The main area views the functionality you've selected. Right after logging in, the main area shows current statistics in a dashboard. Dashboard The dashboard shows current statistics for your Seatsurfing organisation. The statistics and numbers are intended to support you in review usage and user acceptance. Furthermore, Seatsurfing calculates space utilization in real time. This way you can always keep an eye on supply and demand. The top of the dashboard shows information regarding the number of users, locations and spaces as well as the total mumber of bookings. Below that, you can see current booking numbers of today, yesterday, the current week and the previous week. The bar charts visualize the utilization of your spaces. Areas An area in Seatsurfing is anything that has a ground plan. This can be a single floor on a building. In this area you can manage spaces. A space is something a user can book \u2013 depending on your concept, it can be a seat, a desk or an entire room. In the \"Areas\" section you can manage your areas and the spaces within them. In order to manage spaces in an area, you have to upload a floor plan in JPEG, PNG or GIF format. Make sure your floor plan has an appropriate format and resolution. If the resolution is too high, your employees need to scroll a lot and may lose the plot. You can place spaces via drag & drop. Keep the left mouse button pressed to move a space around. To change a space's size, click the lower right corner of a space. To name a space, click on the space's label and enter the new name. Don't forget to save your changes afterwards. Users In the \"Users\" section you can manage your employees which have access to your Seatsurfing organisation. Depending on your configuration in the Settings (see below), your employees can log in to Seatsurfing when successfully authenticated against your corporation's user directory service. This way, there's no need to administer all Seatsurfing users manually. When logging in for the first time, a Seatsurfing user account is created automatically. To create or modify users manually, click the \"Add\" button or click a user from the list. You can set the username (using the user's email address) and his password. Setting a password is only necessary if your user is not authenticating using a linked authentication provider. Additionally, you can flag certain users as organisation administrators. Administrators have full access to Seatsurfing's administrator web-interface. Thus, administrators should have long, secure and complex passwords. Bookings In the \"Bookings\" section you can view the bookings of your emloyees in a certain period. You can choose the period to be shown in the area at the top. Adding or changing bookings through administrators is not possible. Settings In the \"Settings\" section you can configure settings which apply to your entire Seatsurfing organisation. Common settings Allow login of all authenticatable users: When enabled, users can authenticate using an associated auth provider (see below) without having to be managed in Seatsurfing's internal user directory beforehand. A user account in Seatsurfing's database will be created upon first successful authentication. Max. bookings per user: Limits the number of upcoming bookings per user. Max. days in advance: Specifies how many days in advance a booking can be placed. Allow bookings on a daily basis only : When enabled, users can book spaces for entire days only and do not need to enter enter and leave times. Max. booking duration: Limits the duration of a single bookings. Show bookers' names : Reveal the names of other bookers when booking a space. You should mind the privacy. Confluence Shared Secret: A shared secret which is required for signing messages when using Seatsurfing's Confluence App. Domains: A list of domains which can be used your user's email addresses. If not a global administrator, adding a domain requires an ownership verification. This requires access to your domain's DNS server as a TXT record needs to be added. Auth Providers Auth providers are services taking care of authenticating your users using standardised, secure protocols. Seatsurfing currently supports the OAuth 2 protocol. By adding an auth provider, you can validate your Seatsurfing logins using your company's internal user directory. The passwords (or other identification criteria) entered by your users are not transferred to Seatsurfing when using an auth provider. To add an auth provider, click the Add button at the upper right. Depending on the type of your auth provider, various different technical information are needed. Please ask your auth provider's technical administrator for these information. You can also use the templates prepared at the bottom of the dialog. Auth providers can be used in addition to password authentication. When logging in, Seatsurfing checks if the requested user already exists in Seatsurfing's internal user directory. If he does exist and password authentication is enabled, the user will be prompted for her password. If it does not exists or has no password set, she can log in using one of the configured auth providers. Danger zone Use this section to delete your Seatsurfing organisation. The deletion is performed irrevocably. All data associated with your Seatsurfing organisation will be deleted and can not be restored. You should only use this functionality if you're absolutely sure about what you're doing. Search The search box at the top of the administator web-interface can be used by entering a keyword and pressing the enter key. Search includes your users' email addresses (usernames) as well as the names of areas and spaces.","title":"Administration UI"},{"location":"admin-ui/#administration-ui","text":"You can access the adminisatration web interface using a modern web browser by visiting your Seatsurfing's instance backend: http://localhost:8080/admin/ To log in to the administrator interface, your user must be equipped with org admin permissions. After logging in, you'll see a web interface like this: At the left, you can navigate to the various areas of the administrator interface. At the head, you can quickly search for objects (such as users, locations, spaces). Right beside the search bar, you can log out. The main area views the functionality you've selected. Right after logging in, the main area shows current statistics in a dashboard.","title":"Administration UI"},{"location":"admin-ui/#dashboard","text":"The dashboard shows current statistics for your Seatsurfing organisation. The statistics and numbers are intended to support you in review usage and user acceptance. Furthermore, Seatsurfing calculates space utilization in real time. This way you can always keep an eye on supply and demand. The top of the dashboard shows information regarding the number of users, locations and spaces as well as the total mumber of bookings. Below that, you can see current booking numbers of today, yesterday, the current week and the previous week. The bar charts visualize the utilization of your spaces.","title":"Dashboard"},{"location":"admin-ui/#areas","text":"An area in Seatsurfing is anything that has a ground plan. This can be a single floor on a building. In this area you can manage spaces. A space is something a user can book \u2013 depending on your concept, it can be a seat, a desk or an entire room. In the \"Areas\" section you can manage your areas and the spaces within them. In order to manage spaces in an area, you have to upload a floor plan in JPEG, PNG or GIF format. Make sure your floor plan has an appropriate format and resolution. If the resolution is too high, your employees need to scroll a lot and may lose the plot. You can place spaces via drag & drop. Keep the left mouse button pressed to move a space around. To change a space's size, click the lower right corner of a space. To name a space, click on the space's label and enter the new name. Don't forget to save your changes afterwards.","title":"Areas"},{"location":"admin-ui/#users","text":"In the \"Users\" section you can manage your employees which have access to your Seatsurfing organisation. Depending on your configuration in the Settings (see below), your employees can log in to Seatsurfing when successfully authenticated against your corporation's user directory service. This way, there's no need to administer all Seatsurfing users manually. When logging in for the first time, a Seatsurfing user account is created automatically. To create or modify users manually, click the \"Add\" button or click a user from the list. You can set the username (using the user's email address) and his password. Setting a password is only necessary if your user is not authenticating using a linked authentication provider. Additionally, you can flag certain users as organisation administrators. Administrators have full access to Seatsurfing's administrator web-interface. Thus, administrators should have long, secure and complex passwords.","title":"Users"},{"location":"admin-ui/#bookings","text":"In the \"Bookings\" section you can view the bookings of your emloyees in a certain period. You can choose the period to be shown in the area at the top. Adding or changing bookings through administrators is not possible.","title":"Bookings"},{"location":"admin-ui/#settings","text":"In the \"Settings\" section you can configure settings which apply to your entire Seatsurfing organisation.","title":"Settings"},{"location":"admin-ui/#common-settings","text":"Allow login of all authenticatable users: When enabled, users can authenticate using an associated auth provider (see below) without having to be managed in Seatsurfing's internal user directory beforehand. A user account in Seatsurfing's database will be created upon first successful authentication. Max. bookings per user: Limits the number of upcoming bookings per user. Max. days in advance: Specifies how many days in advance a booking can be placed. Allow bookings on a daily basis only : When enabled, users can book spaces for entire days only and do not need to enter enter and leave times. Max. booking duration: Limits the duration of a single bookings. Show bookers' names : Reveal the names of other bookers when booking a space. You should mind the privacy. Confluence Shared Secret: A shared secret which is required for signing messages when using Seatsurfing's Confluence App. Domains: A list of domains which can be used your user's email addresses. If not a global administrator, adding a domain requires an ownership verification. This requires access to your domain's DNS server as a TXT record needs to be added.","title":"Common settings"},{"location":"admin-ui/#auth-providers","text":"Auth providers are services taking care of authenticating your users using standardised, secure protocols. Seatsurfing currently supports the OAuth 2 protocol. By adding an auth provider, you can validate your Seatsurfing logins using your company's internal user directory. The passwords (or other identification criteria) entered by your users are not transferred to Seatsurfing when using an auth provider. To add an auth provider, click the Add button at the upper right. Depending on the type of your auth provider, various different technical information are needed. Please ask your auth provider's technical administrator for these information. You can also use the templates prepared at the bottom of the dialog. Auth providers can be used in addition to password authentication. When logging in, Seatsurfing checks if the requested user already exists in Seatsurfing's internal user directory. If he does exist and password authentication is enabled, the user will be prompted for her password. If it does not exists or has no password set, she can log in using one of the configured auth providers.","title":"Auth Providers"},{"location":"admin-ui/#danger-zone","text":"Use this section to delete your Seatsurfing organisation. The deletion is performed irrevocably. All data associated with your Seatsurfing organisation will be deleted and can not be restored. You should only use this functionality if you're absolutely sure about what you're doing.","title":"Danger zone"},{"location":"admin-ui/#search","text":"The search box at the top of the administator web-interface can be used by entering a keyword and pressing the enter key. Search includes your users' email addresses (usernames) as well as the names of areas and spaces.","title":"Search"},{"location":"app/","text":"Mobile App You can download Seatsurfing's mobile app for Google Android and Apple iOS for free in the app stores: App Store Google Play Your employees can use the app to book their spaces independently and to manage their bookings, including the cancellation of their own existing bookings. Logging in To log in, you need to know your Seatsurfing instance's URL and must have a user account. For both, ask your organisation's Seatsurfing administrators. Start the app on your mobile device. Enter the backend URL and your email address. Afterwards, you can select one or more login methods. If entering a password is required, you'll be asked to enter it. Otherwise, you'll see one or more available authentication methods. Choose one of them. You'll be redirected to your organisation's authentication service. Due to technical reasons, you may need to enter your email address a second time. After logging in, you'll be redirected back to the Seatsurfing ap. Depending on your connection, this might take a few seconds. The app stores your login credentials securely for you, so you don't need to sign in every time you start the app. If you don't want to use this feature, please tap \"Sign off\" after using the app. Place a booking To place a bookings, choose the desired period and area (i.e. floor). You'll then see a floor plan showing the available (green) and unavailable (red) spaces. You can book a space by tapping it. Your organisation might have configured additional restrictions, such as: Max. booking duration Max. number of upcoming bookings per person Max. days a booking can be placed in advance If such a restriction applies, an according message will be shown. Manage bookings To manage your upcoming bookingsm tap \"My bookings\". You'll see a list of your upcoming bookings in ascending order. To show details or to cancel a booking, tap it. To keep things simple, it's not possible to modify an existing booking. Instead, you'll have to cancel and place a new booking.","title":"Mobile App"},{"location":"app/#mobile-app","text":"You can download Seatsurfing's mobile app for Google Android and Apple iOS for free in the app stores: App Store Google Play Your employees can use the app to book their spaces independently and to manage their bookings, including the cancellation of their own existing bookings.","title":"Mobile App"},{"location":"app/#logging-in","text":"To log in, you need to know your Seatsurfing instance's URL and must have a user account. For both, ask your organisation's Seatsurfing administrators. Start the app on your mobile device. Enter the backend URL and your email address. Afterwards, you can select one or more login methods. If entering a password is required, you'll be asked to enter it. Otherwise, you'll see one or more available authentication methods. Choose one of them. You'll be redirected to your organisation's authentication service. Due to technical reasons, you may need to enter your email address a second time. After logging in, you'll be redirected back to the Seatsurfing ap. Depending on your connection, this might take a few seconds. The app stores your login credentials securely for you, so you don't need to sign in every time you start the app. If you don't want to use this feature, please tap \"Sign off\" after using the app.","title":"Logging in"},{"location":"app/#place-a-booking","text":"To place a bookings, choose the desired period and area (i.e. floor). You'll then see a floor plan showing the available (green) and unavailable (red) spaces. You can book a space by tapping it. Your organisation might have configured additional restrictions, such as: Max. booking duration Max. number of upcoming bookings per person Max. days a booking can be placed in advance If such a restriction applies, an according message will be shown.","title":"Place a booking"},{"location":"app/#manage-bookings","text":"To manage your upcoming bookingsm tap \"My bookings\". You'll see a list of your upcoming bookings in ascending order. To show details or to cancel a booking, tap it. To keep things simple, it's not possible to modify an existing booking. Instead, you'll have to cancel and place a new booking.","title":"Manage bookings"},{"location":"booking-ui/","text":"Web Booking UI You can use the web booking interface instead of or in addition to the mobile apps. You can access the web booking UI using a modern web browser at: http://localhost:8080/ui/ After logging in, the web booking UI should look like this: From here, you can directly start to book a space. Using the navigation bar at the top of the screen, you can view your upcomings bookings.","title":"Web Booking UI"},{"location":"booking-ui/#web-booking-ui","text":"You can use the web booking interface instead of or in addition to the mobile apps. You can access the web booking UI using a modern web browser at: http://localhost:8080/ui/ After logging in, the web booking UI should look like this: From here, you can directly start to book a space. Using the navigation bar at the top of the screen, you can view your upcomings bookings.","title":"Web Booking UI"},{"location":"config/","text":"Configuration While you can configure organisation-specific settings in the administrator web interface, global settings are set using environment variables. Set these environment variables when running the Seatsurfing backend Docker container. Example: Using Docker Compose environment: POSTGRES_URL: 'postgres://seatsurfing:DB_PASSWORD@db/seatsurfing?sslmode=disable' INIT_ORG_DOMAIN: 'ihre-domain.de' ... Example: Using docker run docker run -e \"INIT_ORG_DOMAIN=ihre-domain.de\" -e \"POSTGRES_URL=...\" seatsurfing/backend List of environment variables Environment Variable Type Default Description DEV bool 0 Development Mode, set to 1 to enable PUBLIC_LISTEN_ADDR string 0.0.0.0:8080 TCP/IP listen address and port PUBLIC_URL string http://localhost:8080 Public URL FRONTEND_URL string http://localhost:8080 Frontend URL (usually matches the Public URL) APP_URL string seatsurfing:/// App URL (should not be changed) STATIC_ADMIN_UI_PATH string /app/adminui Path to compiled Admin UI files STATIC_BOOKING_UI_PATH string /app/bookingui Path to compiled Booking UI files POSTGRES_URL string postgres://postgres:root @ localhost/seatsurfing?sslmode=disable PostgreSQL Connection JWT_SIGNING_KEY string random string JWT Signing Key SMTP_HOST string 127.0.0.1 SMTP server address SMTP_PORT int 25 SMTP server port SMTP_START_TLS bool 0 Use SMTP STARTTLS extension, set to 1 to enable SMTP_INSECURE_SKIP_VERIFY bool 0 Disable SMTP TLS certificate validation SMTP_AUTH bool 0 SMTP authentication, set to 1 to enable SMTP_AUTH_USER string SMTP auth username SMTP_AUTH_PASS string SMTP auth password SMTP_SENDER_ADDRESS string no-reply@seatsurfing.local SMTP sender address MOCK_SENDMAIL bool 0 SMTP mocking, set to 1 to enable PRINT_CONFIG bool 0 Print configuration on startup, set to 1 to enable INIT_ORG_NAME string Sample Company Your organization's name INIT_ORG_DOMAIN string seatsurfing.local Your organization's domain INIT_ORG_USER string admin Your organization's admin username INIT_ORG_PASS string 12345678 Your organization's admin password INIT_ORG_COUNTRY string DE Your organization's ISO country code INIT_ORG_LANGUAGE string de Your organization's ISO language code ORG_SIGNUP_ENABLED bool 0 Allow signup of new organizations, set to 1 to enable ORG_SIGNUP_DOMAIN string .on.seatsurfing.local Signup domain suffix ORG_SIGNUP_ADMIN string admin Admin username for new signups ORG_SIGNUP_MAX_USERS int 50 Maximum number of users for new organisations ORG_SIGNUP_DELETE bool 0 Allow admins to delete their own organisation","title":"Configuration"},{"location":"config/#configuration","text":"While you can configure organisation-specific settings in the administrator web interface, global settings are set using environment variables. Set these environment variables when running the Seatsurfing backend Docker container.","title":"Configuration"},{"location":"config/#example-using-docker-compose","text":"environment: POSTGRES_URL: 'postgres://seatsurfing:DB_PASSWORD@db/seatsurfing?sslmode=disable' INIT_ORG_DOMAIN: 'ihre-domain.de' ...","title":"Example: Using Docker Compose"},{"location":"config/#example-using-docker-run","text":"docker run -e \"INIT_ORG_DOMAIN=ihre-domain.de\" -e \"POSTGRES_URL=...\" seatsurfing/backend","title":"Example: Using docker run"},{"location":"config/#list-of-environment-variables","text":"Environment Variable Type Default Description DEV bool 0 Development Mode, set to 1 to enable PUBLIC_LISTEN_ADDR string 0.0.0.0:8080 TCP/IP listen address and port PUBLIC_URL string http://localhost:8080 Public URL FRONTEND_URL string http://localhost:8080 Frontend URL (usually matches the Public URL) APP_URL string seatsurfing:/// App URL (should not be changed) STATIC_ADMIN_UI_PATH string /app/adminui Path to compiled Admin UI files STATIC_BOOKING_UI_PATH string /app/bookingui Path to compiled Booking UI files POSTGRES_URL string postgres://postgres:root @ localhost/seatsurfing?sslmode=disable PostgreSQL Connection JWT_SIGNING_KEY string random string JWT Signing Key SMTP_HOST string 127.0.0.1 SMTP server address SMTP_PORT int 25 SMTP server port SMTP_START_TLS bool 0 Use SMTP STARTTLS extension, set to 1 to enable SMTP_INSECURE_SKIP_VERIFY bool 0 Disable SMTP TLS certificate validation SMTP_AUTH bool 0 SMTP authentication, set to 1 to enable SMTP_AUTH_USER string SMTP auth username SMTP_AUTH_PASS string SMTP auth password SMTP_SENDER_ADDRESS string no-reply@seatsurfing.local SMTP sender address MOCK_SENDMAIL bool 0 SMTP mocking, set to 1 to enable PRINT_CONFIG bool 0 Print configuration on startup, set to 1 to enable INIT_ORG_NAME string Sample Company Your organization's name INIT_ORG_DOMAIN string seatsurfing.local Your organization's domain INIT_ORG_USER string admin Your organization's admin username INIT_ORG_PASS string 12345678 Your organization's admin password INIT_ORG_COUNTRY string DE Your organization's ISO country code INIT_ORG_LANGUAGE string de Your organization's ISO language code ORG_SIGNUP_ENABLED bool 0 Allow signup of new organizations, set to 1 to enable ORG_SIGNUP_DOMAIN string .on.seatsurfing.local Signup domain suffix ORG_SIGNUP_ADMIN string admin Admin username for new signups ORG_SIGNUP_MAX_USERS int 50 Maximum number of users for new organisations ORG_SIGNUP_DELETE bool 0 Allow admins to delete their own organisation","title":"List of environment variables"},{"location":"confluence/","text":"Confluence You can integrate the web booking interface for your employees into Atlassian Confluence . This could be beneficially if you're already using Confluence in your organisation for collaboration. As organising common spaces for real-life collaboration is an essential part of this, Seatsurfing is also available as a Confluence App. Using the Confluence App requires the Seatsurfing backend to be up and running. It's not a replacement for it, but an additional frontend. Confluence Cloud Atlassian Marketplace Coming soon. Confluence Data Center Atlassian Marketplace Coming soon. Confluence Server Coming soon.","title":"Confluence"},{"location":"confluence/#confluence","text":"You can integrate the web booking interface for your employees into Atlassian Confluence . This could be beneficially if you're already using Confluence in your organisation for collaboration. As organising common spaces for real-life collaboration is an essential part of this, Seatsurfing is also available as a Confluence App. Using the Confluence App requires the Seatsurfing backend to be up and running. It's not a replacement for it, but an additional frontend.","title":"Confluence"},{"location":"confluence/#confluence-cloud","text":"Atlassian Marketplace Coming soon.","title":"Confluence Cloud"},{"location":"confluence/#confluence-data-center","text":"Atlassian Marketplace Coming soon.","title":"Confluence Data Center"},{"location":"confluence/#confluence-server","text":"Coming soon.","title":"Confluence Server"},{"location":"features/","text":"Features Introduction Seatsurfing is a solution for organisations and enterprises. It allows your employees to book spaces and seats on their own. Seatsurfing enables organisations to drive change towards flexible working times and free seating. Seatsurfing uses an abstract model for bookable locations. You can therefore use Seatsurfing for multiple purposes: Booking single seats in co-working facilities (free seating, flexible seating) Booking entire rooms (i.e. conference rooms) Booking parking lots ...and more... The application does currently not contain an accounting model. This means that you can't bill commercially rentable spaces (such as desks in a coworking space). Seatsurfing is meant for organisations providing free seats to their employees. Components Seatsurfing consists of: A server backend providing a REST API A web-based administrator interface for ones managing the spaces and users (bundled with the server backend) A mobile app for iOS and Android which can be used by an organisation's employees to book seats A web app which can be used instead of the mobile app (also available as a Confluence App, bundled with the server backend) Features The most important features of Seatsurfing are: Booking seats quickly and flexibly using a mobile app Logging in via password or OAuth2 Uploading room plans as JPEG, PNG or GIF Placing spaces/seats via drag & drop Configurable booking settings (i.e. max. booking duration, notice and count) Viewing booking and utilization statistics Hosting Seatsurfing is provided as a Docker image for hosting on-premises. It has been tested using docker run , Docker Compose and Kubernetes.","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#introduction","text":"Seatsurfing is a solution for organisations and enterprises. It allows your employees to book spaces and seats on their own. Seatsurfing enables organisations to drive change towards flexible working times and free seating. Seatsurfing uses an abstract model for bookable locations. You can therefore use Seatsurfing for multiple purposes: Booking single seats in co-working facilities (free seating, flexible seating) Booking entire rooms (i.e. conference rooms) Booking parking lots ...and more... The application does currently not contain an accounting model. This means that you can't bill commercially rentable spaces (such as desks in a coworking space). Seatsurfing is meant for organisations providing free seats to their employees.","title":"Introduction"},{"location":"features/#components","text":"Seatsurfing consists of: A server backend providing a REST API A web-based administrator interface for ones managing the spaces and users (bundled with the server backend) A mobile app for iOS and Android which can be used by an organisation's employees to book seats A web app which can be used instead of the mobile app (also available as a Confluence App, bundled with the server backend)","title":"Components"},{"location":"features/#features_1","text":"The most important features of Seatsurfing are: Booking seats quickly and flexibly using a mobile app Logging in via password or OAuth2 Uploading room plans as JPEG, PNG or GIF Placing spaces/seats via drag & drop Configurable booking settings (i.e. max. booking duration, notice and count) Viewing booking and utilization statistics","title":"Features"},{"location":"features/#hosting","text":"Seatsurfing is provided as a Docker image for hosting on-premises. It has been tested using docker run , Docker Compose and Kubernetes.","title":"Hosting"},{"location":"getting-started/","text":"Docker / Compose 1. System Requirements To set up the Seatsurfing backend on your server, the following system requirements must be met: Linux server Docker runtime environment (or CRI/containerd in case of Kubernetes, tested with Docker Engine version 20.x and containerd version 1.4.x) PostgreSQL (tested with PostgreSQL version 12.x and 13.x) Optionally: Docker Compose (tested with Docker Comopse version 1.29) Recommended: Reverse proxy with TLS termination (tested with Traefik version 2.x) 2. Setting up the container The following example demonstrates setting up Seatsurfing backend using Docker Compose. We'll start the required PostgreSQL database as part of the compose file. Alternatively, you can set up Seatsurfing using docker run , using an external Postgres database of using Kubernetes. For simplicity and demonstration purposes only, container port 8080 is published directly on the host. When using Seatsurfing in production, you should place a reverse proxy in front of the Seatsurfing backend which also takes care of TLS termination. docker-compose.yml version: '3.7' services: server: image: seatsurfing/backend restart: always networks: sql: ports: - 8080:8080 environment: POSTGRES_URL: 'postgres://seatsurfing:DB_PASSWORD@db/seatsurfing?sslmode=disable' JWT_SIGNING_KEY: 'a_random_key' db: image: postgres:12 restart: always networks: sql: volumes: - db:/var/lib/postgresql/data environment: POSTGRES_PASSWORD: DB_PASSWORD POSTGRES_USER: seatsurfing POSTGRES_DB: seatsurfing volumes: db: networks: sql: Start the Seatsurfing backend by running: docker-compose up -d Afterwards, Seatsurfing can be accessed at: http://localhost:8080 3. Initial configration Access the administrator web-interface using a modern web browser (i.e. Chrome, Firefox, Safari) at: Admin UI By default, an organisation with one administrator account is created on backend startup if no organisation already exists in the specified database. If not defined otherwise, use admin@seatsurfing.local as the username and 12345678 as the password. The administrator interface can be used to manage room plans, users and settings. Read more about it in the Administration section. 4. Getting the mobile app You can download the mobile apps for iOS and Android for free in Apple's App Store and on Google Play: App Store Google Play","title":"Docker / Compose"},{"location":"getting-started/#docker-compose","text":"","title":"Docker / Compose"},{"location":"getting-started/#1-system-requirements","text":"To set up the Seatsurfing backend on your server, the following system requirements must be met: Linux server Docker runtime environment (or CRI/containerd in case of Kubernetes, tested with Docker Engine version 20.x and containerd version 1.4.x) PostgreSQL (tested with PostgreSQL version 12.x and 13.x) Optionally: Docker Compose (tested with Docker Comopse version 1.29) Recommended: Reverse proxy with TLS termination (tested with Traefik version 2.x)","title":"1. System Requirements"},{"location":"getting-started/#2-setting-up-the-container","text":"The following example demonstrates setting up Seatsurfing backend using Docker Compose. We'll start the required PostgreSQL database as part of the compose file. Alternatively, you can set up Seatsurfing using docker run , using an external Postgres database of using Kubernetes. For simplicity and demonstration purposes only, container port 8080 is published directly on the host. When using Seatsurfing in production, you should place a reverse proxy in front of the Seatsurfing backend which also takes care of TLS termination.","title":"2. Setting up the container"},{"location":"getting-started/#docker-composeyml","text":"version: '3.7' services: server: image: seatsurfing/backend restart: always networks: sql: ports: - 8080:8080 environment: POSTGRES_URL: 'postgres://seatsurfing:DB_PASSWORD@db/seatsurfing?sslmode=disable' JWT_SIGNING_KEY: 'a_random_key' db: image: postgres:12 restart: always networks: sql: volumes: - db:/var/lib/postgresql/data environment: POSTGRES_PASSWORD: DB_PASSWORD POSTGRES_USER: seatsurfing POSTGRES_DB: seatsurfing volumes: db: networks: sql: Start the Seatsurfing backend by running: docker-compose up -d Afterwards, Seatsurfing can be accessed at: http://localhost:8080","title":"docker-compose.yml"},{"location":"getting-started/#3-initial-configration","text":"Access the administrator web-interface using a modern web browser (i.e. Chrome, Firefox, Safari) at: Admin UI By default, an organisation with one administrator account is created on backend startup if no organisation already exists in the specified database. If not defined otherwise, use admin@seatsurfing.local as the username and 12345678 as the password. The administrator interface can be used to manage room plans, users and settings. Read more about it in the Administration section.","title":"3. Initial configration"},{"location":"getting-started/#4-getting-the-mobile-app","text":"You can download the mobile apps for iOS and Android for free in Apple's App Store and on Google Play: App Store Google Play","title":"4. Getting the mobile app"},{"location":"kubernetes/","text":"Kubernetes 1. System Requirements To set up the Seatsurfing backend on Kubernetes, the following system requirements must be met: Linux server(s) Kubernetes cluster with at least one worker node (tested with Kubernetes 1.22 and containerd version 1.5.x) Persistent storage for Postgres database (tested with Longhorn 1.2.x) Recommended: Reverse proxy with TLS termination (tested with nginx in front of Kubernetes' Traefik ingress) 2. Create database secret Create a secret for your database password using kubectl : kubectl create secret generic seatsurfing-db \\ --from-literal=db-password='DB_PASSWORD' Make sure to replace DB_PASSWORD with a secure password. 3. Create database deployment Next, we'll create the necessary configurations and deployment for the Postgres database. This configuration contains: A persistent volume claim which contains the database files (adjust as needed) A deployment of Postgres version 13, inluding some adjustments to make sure Postgres runs well on Kubernetes A service which exposes TCP port 5432 of our Postgres database server A network policy which ensures that only our Seatsurfing backend is able to connect to the Postgres database service Create a file seatsurfing-db.yaml with the following contents (modify as needed): kind: PersistentVolumeClaim apiVersion: v1 metadata: name: seatsurfing-db spec: storageClassName: longhorn accessModes: - ReadWriteOnce resources: requests: storage: 1G --- apiVersion: apps/v1 kind: Deployment metadata: name: seatsurfing-db spec: replicas: 1 strategy: type: Recreate selector: matchLabels: app: seatsurfing-db template: metadata: labels: app: seatsurfing-db spec: securityContext: fsGroup: 999 volumes: - name: db persistentVolumeClaim: claimName: seatsurfing-db initContainers: - image: alpine:latest name: init command: [\"sh\", \"-c\", \"chown 999:999 /var/lib/postgresql/data\"] volumeMounts: - mountPath: \"/var/lib/postgresql/data\" name: db readOnly: false subPath: postgres containers: - image: postgres:13 name: db imagePullPolicy: Always ports: - name: port-postgres containerPort: 5432 env: - name: POSTGRES_PASSWORD valueFrom: secretKeyRef: name: seatsurfing-db key: db-password - name: POSTGRES_USER value: \"seatsurfing\" - name: POSTGRES_DB value: \"seatsurfing\" volumeMounts: - mountPath: \"/var/lib/postgresql/data\" name: db readOnly: false subPath: postgres --- apiVersion: v1 kind: Service metadata: name: seatsurfing-db spec: ports: - port: 5432 protocol: TCP targetPort: 5432 selector: app: seatsurfing-db type: ClusterIP --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: seatsurfing-db spec: podSelector: matchLabels: app: seatsurfing-db policyTypes: - Ingress ingress: - from: - podSelector: matchLabels: app: seatsurfing-backend Apply the file: kubectl apply -f seatsurfing-db.yaml 4. Create Seatsurfing deployment and ingress Now we're ready to create the configurations and the deployment of our actual Seatsurfing backend. This includes: A deployment of the Seatsurfing backend itself, which connects to the previously deployed Postgres database server A service which exposes port 80 of the Seatsurfing backend An ingress which makes the Seatsurfing backend available at host seatsurfing.your-domain.com (you'll need to change that) using Traefik Please note: We're making the backend available insecurely via HTTP here. This example assumes you're having a reverse proxy performing TLS termination in front of your Kubernetes cluster. If this is not the case, you should really consider changing port 80 to 443 and add HTTPS encryption to the example. Create a file seatsurfing-backend.yaml with the following contents (modify as needed): apiVersion: apps/v1 kind: Deployment metadata: name: seatsurfing-backend spec: replicas: 1 selector: matchLabels: app: seatsurfing-backend template: metadata: labels: app: seatsurfing-backend spec: containers: - image: seatsurfing/backend:latest name: server imagePullPolicy: Always ports: - name: port-http containerPort: 8080 env: - name: POSTGRES_PASS valueFrom: secretKeyRef: name: seatsurfing-db key: db-password - name: POSTGRES_URL value: \"postgres://seatsurfing:$(POSTGRES_PASS)@seatsurfing-db/seatsurfing?sslmode=disable\" - name: JWT_SIGNING_KEY value: \"a_random_key\" - name: PUBLIC_URL value: \"https://seatsurfing.your-domain.com\" - name: FRONTEND_URL value: \"https://seatsurfing.your-domain.com\" --- apiVersion: v1 kind: Service metadata: name: seatsurfing-backend spec: ports: - port: 80 protocol: TCP targetPort: 8080 selector: app: seatsurfing-backend type: ClusterIP --- apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: seatsurfing-backend spec: entryPoints: - web routes: - match: Host(`seatsurfing.your-domain.com`) kind: Rule services: - name: seatsurfing-backend port: 80 Apply the file: kubectl apply -f seatsurfing-backend.yaml Make sure seatsurfing-db and seatsurfing-backend and \"Running\": kubectl get pods | grep seatsurfing Afterwards, Seatsurfing can be accessed at the specified host (i.e. https://seatsurfing.your-domain.com). 5. Initial configration Access the administrator web-interface using a modern web browser (i.e. Chrome, Firefox, Safari) at: /admin/ By default, an organisation with one administrator account is created on backend startup if no organisation already exists in the specified database. If not defined otherwise, use admin@seatsurfing.local as the username and 12345678 as the password. The administrator interface can be used to manage room plans, users and settings. Read more about it in the Administration section. 6. Getting the mobile app You can download the mobile apps for iOS and Android for free in Apple's App Store and on Google Play: App Store Google Play","title":"Kubernetes"},{"location":"kubernetes/#kubernetes","text":"","title":"Kubernetes"},{"location":"kubernetes/#1-system-requirements","text":"To set up the Seatsurfing backend on Kubernetes, the following system requirements must be met: Linux server(s) Kubernetes cluster with at least one worker node (tested with Kubernetes 1.22 and containerd version 1.5.x) Persistent storage for Postgres database (tested with Longhorn 1.2.x) Recommended: Reverse proxy with TLS termination (tested with nginx in front of Kubernetes' Traefik ingress)","title":"1. System Requirements"},{"location":"kubernetes/#2-create-database-secret","text":"Create a secret for your database password using kubectl : kubectl create secret generic seatsurfing-db \\ --from-literal=db-password='DB_PASSWORD' Make sure to replace DB_PASSWORD with a secure password.","title":"2. Create database secret"},{"location":"kubernetes/#3-create-database-deployment","text":"Next, we'll create the necessary configurations and deployment for the Postgres database. This configuration contains: A persistent volume claim which contains the database files (adjust as needed) A deployment of Postgres version 13, inluding some adjustments to make sure Postgres runs well on Kubernetes A service which exposes TCP port 5432 of our Postgres database server A network policy which ensures that only our Seatsurfing backend is able to connect to the Postgres database service Create a file seatsurfing-db.yaml with the following contents (modify as needed): kind: PersistentVolumeClaim apiVersion: v1 metadata: name: seatsurfing-db spec: storageClassName: longhorn accessModes: - ReadWriteOnce resources: requests: storage: 1G --- apiVersion: apps/v1 kind: Deployment metadata: name: seatsurfing-db spec: replicas: 1 strategy: type: Recreate selector: matchLabels: app: seatsurfing-db template: metadata: labels: app: seatsurfing-db spec: securityContext: fsGroup: 999 volumes: - name: db persistentVolumeClaim: claimName: seatsurfing-db initContainers: - image: alpine:latest name: init command: [\"sh\", \"-c\", \"chown 999:999 /var/lib/postgresql/data\"] volumeMounts: - mountPath: \"/var/lib/postgresql/data\" name: db readOnly: false subPath: postgres containers: - image: postgres:13 name: db imagePullPolicy: Always ports: - name: port-postgres containerPort: 5432 env: - name: POSTGRES_PASSWORD valueFrom: secretKeyRef: name: seatsurfing-db key: db-password - name: POSTGRES_USER value: \"seatsurfing\" - name: POSTGRES_DB value: \"seatsurfing\" volumeMounts: - mountPath: \"/var/lib/postgresql/data\" name: db readOnly: false subPath: postgres --- apiVersion: v1 kind: Service metadata: name: seatsurfing-db spec: ports: - port: 5432 protocol: TCP targetPort: 5432 selector: app: seatsurfing-db type: ClusterIP --- apiVersion: networking.k8s.io/v1 kind: NetworkPolicy metadata: name: seatsurfing-db spec: podSelector: matchLabels: app: seatsurfing-db policyTypes: - Ingress ingress: - from: - podSelector: matchLabels: app: seatsurfing-backend Apply the file: kubectl apply -f seatsurfing-db.yaml","title":"3. Create database deployment"},{"location":"kubernetes/#4-create-seatsurfing-deployment-and-ingress","text":"Now we're ready to create the configurations and the deployment of our actual Seatsurfing backend. This includes: A deployment of the Seatsurfing backend itself, which connects to the previously deployed Postgres database server A service which exposes port 80 of the Seatsurfing backend An ingress which makes the Seatsurfing backend available at host seatsurfing.your-domain.com (you'll need to change that) using Traefik Please note: We're making the backend available insecurely via HTTP here. This example assumes you're having a reverse proxy performing TLS termination in front of your Kubernetes cluster. If this is not the case, you should really consider changing port 80 to 443 and add HTTPS encryption to the example. Create a file seatsurfing-backend.yaml with the following contents (modify as needed): apiVersion: apps/v1 kind: Deployment metadata: name: seatsurfing-backend spec: replicas: 1 selector: matchLabels: app: seatsurfing-backend template: metadata: labels: app: seatsurfing-backend spec: containers: - image: seatsurfing/backend:latest name: server imagePullPolicy: Always ports: - name: port-http containerPort: 8080 env: - name: POSTGRES_PASS valueFrom: secretKeyRef: name: seatsurfing-db key: db-password - name: POSTGRES_URL value: \"postgres://seatsurfing:$(POSTGRES_PASS)@seatsurfing-db/seatsurfing?sslmode=disable\" - name: JWT_SIGNING_KEY value: \"a_random_key\" - name: PUBLIC_URL value: \"https://seatsurfing.your-domain.com\" - name: FRONTEND_URL value: \"https://seatsurfing.your-domain.com\" --- apiVersion: v1 kind: Service metadata: name: seatsurfing-backend spec: ports: - port: 80 protocol: TCP targetPort: 8080 selector: app: seatsurfing-backend type: ClusterIP --- apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: seatsurfing-backend spec: entryPoints: - web routes: - match: Host(`seatsurfing.your-domain.com`) kind: Rule services: - name: seatsurfing-backend port: 80 Apply the file: kubectl apply -f seatsurfing-backend.yaml Make sure seatsurfing-db and seatsurfing-backend and \"Running\": kubectl get pods | grep seatsurfing Afterwards, Seatsurfing can be accessed at the specified host (i.e. https://seatsurfing.your-domain.com).","title":"4. Create Seatsurfing deployment and ingress"},{"location":"kubernetes/#5-initial-configration","text":"Access the administrator web-interface using a modern web browser (i.e. Chrome, Firefox, Safari) at: /admin/ By default, an organisation with one administrator account is created on backend startup if no organisation already exists in the specified database. If not defined otherwise, use admin@seatsurfing.local as the username and 12345678 as the password. The administrator interface can be used to manage room plans, users and settings. Read more about it in the Administration section.","title":"5. Initial configration"},{"location":"kubernetes/#6-getting-the-mobile-app","text":"You can download the mobile apps for iOS and Android for free in Apple's App Store and on Google Play: App Store Google Play","title":"6. Getting the mobile app"},{"location":"rest-api/","text":"Rest API Seatsurfing provides and uses a couple of REST APIs. The REST APIs are used by the mobile and web app as well as the administrator web interface. Authorization checks Each API function is protected by authorization checks: First check: Role of the user (anonymous, user, org admin, super admin) Second check: Organisation membership Status Codes Seatsurfing's REST API uses the well known HTTP status codes to inform the caller about the result and eventual errors: 201 Created: Object created (includes HTTP response header X-Object-ID ) 204 No Content: Object updated or no response content 400 Bad Request: Malformed request or incomplete JSON 401 Unauthorized: JWT in HTTP request header Authorization missing, expired or invalid 403 Forbidden: Authorized, by user has no access to requested resource 404 Not found: Object not found 409 Conflict: Conflicting request 500 Internal Server Error Roles Anonymous: Every user allowed, no authorization required User: Authorized user who is a member of an organisation Org Admin: An organisation's administrator Super Admin: Global administrator with access to all organisations and all functions Endpoints Authentication Funktion Endpunkt Methode Anonym User Org Admin Super Admin Password Login /auth/login POST X Preflight Login to check for available login methods /auth/preflight POST X Perform OAuth Login /auth/{id}/login/{type} GET X OAuth Callback (server to server) /auth/{id}/callback GET X Retrieve JWT from frontend / app after OAuth Login /auth/verify/{id} GET X Bookings Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one own booking /booking/{id} GET X Update one own booking /booking/{id} PUT X Delete one own booking /booking/{id} DELETE X Create new booking /booking/ POST X Get user's own upcoming bookings /booking/ GET X Get filtered org bookings /booking/filter/ POST X Locations Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one location /location/{id} GET X Update one location /location/{id} PUT X Delete one location /location/{id} DELETE X Get all organization's location /location/ GET X Create a new location /location/ POST X Get location map /location/{id}/map GET X Set/update location map /location/{id}/map POST X Spaces Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one space /location/{locationId}/space/{id} GET X Update one space /location/{locationId}/space/{id} PUT X Delete one space /location/{locationId}/space/{id} DELETE X Get all spaces in a location /location/{locationId}/space/ GET X Create a new space in a location /location/{locationId}/space/ POST X Get spaces with availability information for a specific time period /location/{locationId}/space/availability POST X Organisations Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one organization /organization/{id} GET X Update one organization /organization/{id} PUT X Delete one organization /organization/{id} DELETE X Get all organizations /organization/ GET X Create a new organization /organization/ POST X Get organization for domain /organization/domain/{domain} GET X Get all domains for an organization /organization/{id}/domain/ GET X Add a new domain to an organization /organization/{id}/domain/{domain} POST X Remove a domain from an organization /organization/{id}/domain/{domain} DELETE X Verify DNS-TXT-Record for a domain /organization/{id}/domain/{domain}/verify POST X Search Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get search results for keyword /search/{keyword} GET X Settings Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get all settings /setting/ GET X Update all settings /setting/ PUT X Get one setting /setting/{name} GET X Update one setting /setting/{name} PUT X Signup Funktion Endpunkt Methode Anonym User Org Admin Super Admin Signup and init double-opt-in /signup/ POST X Complete double-opt-in process /signup/confirm/{id} POST X Statistics Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get organization's stats /stats/ GET X Users Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one user /user/{id} GET X Update one user /user/{id} PUT X Delete one user /user/{id} DELETE X Set a user's password /user/{id}/password PUT X Get all users of an organization /user/ GET X Create a new user in an organization /user/ POST X Get user's own details /user/me GET X Auth Providers Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one auth provider /auth-provider/{id} GET X Update one auth provider /auth-provider/{id} PUT X Delete one auth provider /auth-provider/{id} DELETE X Get all auth providers of an organization /auth-provider/ GET X Create a new auth provider in an organization /auth-provider/ POST X Get public auth provider information for an organization /auth-provider/org/{id} GET X","title":"Rest API"},{"location":"rest-api/#rest-api","text":"Seatsurfing provides and uses a couple of REST APIs. The REST APIs are used by the mobile and web app as well as the administrator web interface.","title":"Rest API"},{"location":"rest-api/#authorization-checks","text":"Each API function is protected by authorization checks: First check: Role of the user (anonymous, user, org admin, super admin) Second check: Organisation membership","title":"Authorization checks"},{"location":"rest-api/#status-codes","text":"Seatsurfing's REST API uses the well known HTTP status codes to inform the caller about the result and eventual errors: 201 Created: Object created (includes HTTP response header X-Object-ID ) 204 No Content: Object updated or no response content 400 Bad Request: Malformed request or incomplete JSON 401 Unauthorized: JWT in HTTP request header Authorization missing, expired or invalid 403 Forbidden: Authorized, by user has no access to requested resource 404 Not found: Object not found 409 Conflict: Conflicting request 500 Internal Server Error","title":"Status Codes"},{"location":"rest-api/#roles","text":"Anonymous: Every user allowed, no authorization required User: Authorized user who is a member of an organisation Org Admin: An organisation's administrator Super Admin: Global administrator with access to all organisations and all functions","title":"Roles"},{"location":"rest-api/#endpoints","text":"","title":"Endpoints"},{"location":"rest-api/#authentication","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Password Login /auth/login POST X Preflight Login to check for available login methods /auth/preflight POST X Perform OAuth Login /auth/{id}/login/{type} GET X OAuth Callback (server to server) /auth/{id}/callback GET X Retrieve JWT from frontend / app after OAuth Login /auth/verify/{id} GET X","title":"Authentication"},{"location":"rest-api/#bookings","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one own booking /booking/{id} GET X Update one own booking /booking/{id} PUT X Delete one own booking /booking/{id} DELETE X Create new booking /booking/ POST X Get user's own upcoming bookings /booking/ GET X Get filtered org bookings /booking/filter/ POST X","title":"Bookings"},{"location":"rest-api/#locations","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one location /location/{id} GET X Update one location /location/{id} PUT X Delete one location /location/{id} DELETE X Get all organization's location /location/ GET X Create a new location /location/ POST X Get location map /location/{id}/map GET X Set/update location map /location/{id}/map POST X","title":"Locations"},{"location":"rest-api/#spaces","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one space /location/{locationId}/space/{id} GET X Update one space /location/{locationId}/space/{id} PUT X Delete one space /location/{locationId}/space/{id} DELETE X Get all spaces in a location /location/{locationId}/space/ GET X Create a new space in a location /location/{locationId}/space/ POST X Get spaces with availability information for a specific time period /location/{locationId}/space/availability POST X","title":"Spaces"},{"location":"rest-api/#organisations","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one organization /organization/{id} GET X Update one organization /organization/{id} PUT X Delete one organization /organization/{id} DELETE X Get all organizations /organization/ GET X Create a new organization /organization/ POST X Get organization for domain /organization/domain/{domain} GET X Get all domains for an organization /organization/{id}/domain/ GET X Add a new domain to an organization /organization/{id}/domain/{domain} POST X Remove a domain from an organization /organization/{id}/domain/{domain} DELETE X Verify DNS-TXT-Record for a domain /organization/{id}/domain/{domain}/verify POST X","title":"Organisations"},{"location":"rest-api/#search","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get search results for keyword /search/{keyword} GET X","title":"Search"},{"location":"rest-api/#settings","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get all settings /setting/ GET X Update all settings /setting/ PUT X Get one setting /setting/{name} GET X Update one setting /setting/{name} PUT X","title":"Settings"},{"location":"rest-api/#signup","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Signup and init double-opt-in /signup/ POST X Complete double-opt-in process /signup/confirm/{id} POST X","title":"Signup"},{"location":"rest-api/#statistics","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get organization's stats /stats/ GET X","title":"Statistics"},{"location":"rest-api/#users","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one user /user/{id} GET X Update one user /user/{id} PUT X Delete one user /user/{id} DELETE X Set a user's password /user/{id}/password PUT X Get all users of an organization /user/ GET X Create a new user in an organization /user/ POST X Get user's own details /user/me GET X","title":"Users"},{"location":"rest-api/#auth-providers","text":"Funktion Endpunkt Methode Anonym User Org Admin Super Admin Get one auth provider /auth-provider/{id} GET X Update one auth provider /auth-provider/{id} PUT X Delete one auth provider /auth-provider/{id} DELETE X Get all auth providers of an organization /auth-provider/ GET X Create a new auth provider in an organization /auth-provider/ POST X Get public auth provider information for an organization /auth-provider/org/{id} GET X","title":"Auth Providers"},{"location":"support/","text":"Support For administrators If you run a Seatsurfing instance and need assistance, feel free to contact us by email: info@seatsurfing.app For users If you're using Seatsurfing to book spaces, seats or desks and need assistance, please contact your organisation's Seatsurfing administrators. Feature Requests & Issues If you have a feature request or found a bug, please report it on GitHub: github.com/seatsurfing Availability We're continuously monitoring the availability of our servers using automated monitoring systems. If an error occurs, we're notified automtically so we can act quickly. You can view the status of Seatsurfing's systems here: status.seatsurfing.app","title":"Support"},{"location":"support/#support","text":"","title":"Support"},{"location":"support/#for-administrators","text":"If you run a Seatsurfing instance and need assistance, feel free to contact us by email: info@seatsurfing.app","title":"For administrators"},{"location":"support/#for-users","text":"If you're using Seatsurfing to book spaces, seats or desks and need assistance, please contact your organisation's Seatsurfing administrators.","title":"For users"},{"location":"support/#feature-requests-issues","text":"If you have a feature request or found a bug, please report it on GitHub: github.com/seatsurfing","title":"Feature Requests &amp; Issues"},{"location":"support/#availability","text":"We're continuously monitoring the availability of our servers using automated monitoring systems. If an error occurs, we're notified automtically so we can act quickly. You can view the status of Seatsurfing's systems here: status.seatsurfing.app","title":"Availability"},{"location":"upgrading/","text":"Upgrading Seatsurfing supports automated in-place upgrades. When starting a newer version of Seatsurfing backend with an existing database, the database schema version is determined and required schema upgrades are performed automatically. Note: Downgrades are not supported and may result in startup failures and corrupt data! Steps to upgrade Backup your existing Seatsurfing database. Example: pg_dumpall -U seatsurfing' > ./seatsurfing_db.psql Shut down the running Seatsurfing backend Docker container. Start the newer version of the Seatsurfing backend with the existing database.","title":"Upgrading"},{"location":"upgrading/#upgrading","text":"Seatsurfing supports automated in-place upgrades. When starting a newer version of Seatsurfing backend with an existing database, the database schema version is determined and required schema upgrades are performed automatically. Note: Downgrades are not supported and may result in startup failures and corrupt data!","title":"Upgrading"},{"location":"upgrading/#steps-to-upgrade","text":"Backup your existing Seatsurfing database. Example: pg_dumpall -U seatsurfing' > ./seatsurfing_db.psql Shut down the running Seatsurfing backend Docker container. Start the newer version of the Seatsurfing backend with the existing database.","title":"Steps to upgrade"},{"location":"auth-provider/azure/","text":"Microsoft Azure You can connect your Microsoft Azure Tenant as an Auth Provider for Seatsurfing. 1. Configure your Azure Tenant Log in to the Microsoft Azure Portal . Navigate to \"App registrations\". Create a new application with supported account type \"Accounts in this organizational directory only (Default Directory only - Single tenant)\" Copy the Application (client) ID. Navigate to \"Certificates & secrets\", create a new Client secret and copy the Secret Value ( not the ID). Navigate to \"API permissions\", click \"Add permission\", choose \"Microsoft Graph\", select \"Delegated\". Then search and add the required permissions: email User.Read 2. Configure Seatsurfing Log in to Seatsurfing's Administrator UI. Navigate to Settings and add a new Auth Provider. Select the Microsoft template. Paste the Application (client) ID into the \"Client ID\" field. Paste the Secret Value into the \"Client Secret\" field. Save the Auth Provider. Copy the Callback URL which is displayed right after saving. 3. Finish Azure Configuration Head back to the App Registration you've created in the Azure Portal in Step 1. Navigate to \"Authentication\" and add the copied Callback URL from Step 2 as a Web Redirect URI (i.e. https://app.seatsurfing.app/auth/xyz/callback ).","title":"Microsoft Azure"},{"location":"auth-provider/azure/#microsoft-azure","text":"You can connect your Microsoft Azure Tenant as an Auth Provider for Seatsurfing.","title":"Microsoft Azure"},{"location":"auth-provider/azure/#1-configure-your-azure-tenant","text":"Log in to the Microsoft Azure Portal . Navigate to \"App registrations\". Create a new application with supported account type \"Accounts in this organizational directory only (Default Directory only - Single tenant)\" Copy the Application (client) ID. Navigate to \"Certificates & secrets\", create a new Client secret and copy the Secret Value ( not the ID). Navigate to \"API permissions\", click \"Add permission\", choose \"Microsoft Graph\", select \"Delegated\". Then search and add the required permissions: email User.Read","title":"1. Configure your Azure Tenant"},{"location":"auth-provider/azure/#2-configure-seatsurfing","text":"Log in to Seatsurfing's Administrator UI. Navigate to Settings and add a new Auth Provider. Select the Microsoft template. Paste the Application (client) ID into the \"Client ID\" field. Paste the Secret Value into the \"Client Secret\" field. Save the Auth Provider. Copy the Callback URL which is displayed right after saving.","title":"2. Configure Seatsurfing"},{"location":"auth-provider/azure/#3-finish-azure-configuration","text":"Head back to the App Registration you've created in the Azure Portal in Step 1. Navigate to \"Authentication\" and add the copied Callback URL from Step 2 as a Web Redirect URI (i.e. https://app.seatsurfing.app/auth/xyz/callback ).","title":"3. Finish Azure Configuration"},{"location":"auth-provider/google/","text":"Google Cloud You can connect your Google Cloud Platform as an Auth Provider for Seatsurfing. 1. Configure your Google Cloud Platform Account Log in to the Google Cloud Console . Navigate to \"APIs and services\". Click \"Create credentials\" and choose \"OAuth client ID\". Create a new client ID with Application Type \"Web application\" and save it. Copy the Client ID and the Client Secret. 2. Configure Seatsurfing Log in to Seatsurfing's Administrator UI. Navigate to Settings and add a new Auth Provider. Select the Google template. Paste the Client ID into the \"Client ID\" field. Paste the Secret ID into the \"Client Secret\" field. Save the Auth Provider. Copy the Callback URL which is displayed right after saving. 3. Finish Google Cloud Configuration Head back to the OAuth Client you've created in the Google Cloud Console in Step 1. Click \"Add URI\" under \"Authorised redirect URIs\" and add the copied Callback URL from Step 2 as a Web Redirect URI (i.e. https://app.seatsurfing.app/auth/xyz/callback ).","title":"Google Cloud"},{"location":"auth-provider/google/#google-cloud","text":"You can connect your Google Cloud Platform as an Auth Provider for Seatsurfing.","title":"Google Cloud"},{"location":"auth-provider/google/#1-configure-your-google-cloud-platform-account","text":"Log in to the Google Cloud Console . Navigate to \"APIs and services\". Click \"Create credentials\" and choose \"OAuth client ID\". Create a new client ID with Application Type \"Web application\" and save it. Copy the Client ID and the Client Secret.","title":"1. Configure your Google Cloud Platform Account"},{"location":"auth-provider/google/#2-configure-seatsurfing","text":"Log in to Seatsurfing's Administrator UI. Navigate to Settings and add a new Auth Provider. Select the Google template. Paste the Client ID into the \"Client ID\" field. Paste the Secret ID into the \"Client Secret\" field. Save the Auth Provider. Copy the Callback URL which is displayed right after saving.","title":"2. Configure Seatsurfing"},{"location":"auth-provider/google/#3-finish-google-cloud-configuration","text":"Head back to the OAuth Client you've created in the Google Cloud Console in Step 1. Click \"Add URI\" under \"Authorised redirect URIs\" and add the copied Callback URL from Step 2 as a Web Redirect URI (i.e. https://app.seatsurfing.app/auth/xyz/callback ).","title":"3. Finish Google Cloud Configuration"}]}